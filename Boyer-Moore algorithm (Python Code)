def bad_character_heuristic(pattern):
    """
    Creates the bad character heuristic table.
    This table will store the rightmost occurrence of each character in the pattern.
    If a character is not found in the pattern, its value will be -1.
    """
    bad_char = [-1] * 256  # Initialize the table with -1 for all characters

    # Fill the table with the rightmost occurrence of each character in the pattern
    for i in range(len(pattern)):
        bad_char[ord(pattern[i])] = i  # Update the table with the rightmost occurrence of each character

    return bad_char

def good_suffix_heuristic(pattern):
    """
    Creates the good suffix heuristic table.
    This table will store the shift distances when a mismatch occurs at each position of the pattern.
    """
    m = len(pattern)
    good_suffix = [0] * (m + 1)  # Initialize the good suffix table with 0
    border_pos = [0] * (m + 1)   # Auxiliary array to store the border positions

    # Initialize the border positions
    i = m
    j = m + 1
    border_pos[i] = j

    # Preprocess the pattern to fill the border positions array
    while i > 0:
        # Find the border position where a mismatch occurs
        while j <= m and pattern[i - 1] != pattern[j - 1]:
            if good_suffix[j] == 0:
                good_suffix[j] = j - i  # Update the good suffix table
            j = border_pos[j]
        i -= 1
        j -= 1
        border_pos[i] = j

    # Fill the good suffix table using the border positions
    j = border_pos[0]
    for i in range(m + 1):
        if good_suffix[i] == 0:
            good_suffix[i] = j
        if i == j:
            j = border_pos[j]

    return good_suffix

def boyer_moore_search(text, pattern):
    """
    Searches for occurrences of the pattern in the text using the Boyer-Moore algorithm.
    """
    m = len(pattern)
    n = len(text)

    # Preprocess the pattern to create the bad character and good suffix tables
    bad_char = bad_character_heuristic(pattern)
    good_suffix = good_suffix_heuristic(pattern)

    s = 0  # s is the shift of the pattern with respect to the text
    while s <= n - m:
        j = m - 1

        # Keep reducing j while characters of pattern and text are matching at this shift s
        while j >= 0 and pattern[j] == text[s + j]:
            j -= 1

        # If the pattern is present at current shift, then j will become -1
        if j < 0:
            print(f"Pattern found at index {s}")
            s += good_suffix[0]  # Use the good suffix heuristic to shift the pattern
        else:
            # Use the maximum value of the bad character heuristic and the good suffix heuristic to shift the pattern
            s += max(good_suffix[j + 1], j - bad_char[ord(text[s + j])])

# Example usage
text = "ABACABAD"
pattern = "ABA"
boyer_moore_search(text, pattern)
